var searchIndex = JSON.parse('{\
"search_trees":{"doc":"Utilities for binary search tree, red-black tree, and AVL…","i":[[0,"prelude","search_trees","Convenience re-export of common members",null,null],[0,"rbtree","","Red-black tree",null,null],[3,"RedBlackTreeNode","search_trees::rbtree","Node struct for RedBlackTree struct",null,null],[12,"data","","Data stored in the node",0,null],[12,"color","","The color of the node",0,null],[3,"RedBlackTree","","An implementation of Red-black Tree",null,null],[4,"NodeColor","","Color representation for the Node of RedBlackTree struct",null,null],[13,"Red","","Red color",1,null],[13,"Black","","Black color, the root of RedBlackTree will be set to Black",1,null],[11,"new","","Create a new Red-black Tree",2,[[]]],[11,"insert","","Insert a new value to the tree",2,[[]]],[11,"delete","","Delete a value from the tree",2,[[]]],[0,"avltree","search_trees","AVL tree",null,null],[3,"AVLTreeNode","search_trees::avltree","Node struct for AVLTree struct",null,null],[12,"data","","Data stored in the node",3,null],[3,"AVLTree","","An implementation of AVL Tree",null,null],[11,"new","","Create a new AVL Tree",4,[[]]],[11,"insert","","Insert a new value to the tree",4,[[]]],[11,"delete","","Delete a value from the tree",4,[[]]],[0,"bstree","search_trees","Binary search tree",null,null],[3,"BinarySearchTreeNode","search_trees::bstree","Node struct for BinarySearchTree struct",null,null],[12,"data","","Data stored in the node",5,null],[3,"BinarySearchTree","","An implementation of Binary Search Tree",null,null],[11,"new","","Create a new Binary Search Tree",6,[[]]],[11,"insert","","Insert a new value to the tree",6,[[]]],[11,"delete","","Delete a value from the tree",6,[[]]],[0,"base","search_trees","An automatically-implemented extension trait for nodes and…",null,null],[8,"QueryableTreeNode","search_trees::base","Provide query functions for nodes",null,null],[10,"get_left","","Get left child node",7,[[],["option",4]]],[10,"get_right","","Get right child node",7,[[],["option",4]]],[10,"get_data","","Get data from current node",7,[[]]],[11,"height","","Return the height of current node, which will be called by…",7,[[]]],[11,"count_leaves","","Return the number of leaves, which will be called by…",7,[[]]],[11,"print_inorder","","Print nodes inorder , which will be called by…",7,[[]]],[11,"min","","Return the minimum value of current node, which will be…",7,[[]]],[11,"max","","Return the maximum value of current node, which will be…",7,[[]]],[11,"contains","","Determine whether the node and its successors contains…",7,[[]]],[11,"len","","Return the length of the current node, which will be…",7,[[]]],[8,"QueryableTree","","Provide query functions for trees",null,null],[10,"get_root","","",8,[[],["option",4]]],[11,"count_leaves","","Return the number of leaves.",8,[[]]],[11,"height","","Return the height of tree.",8,[[]]],[11,"print_inorder","","Print tree inorder",8,[[]]],[11,"is_empty","","Determine whether the tree is empty",8,[[]]],[11,"min","","Return the minimum value of the tree",8,[[],["option",4]]],[11,"max","","Return the maximum value of the tree",8,[[],["option",4]]],[11,"contains","","Determine whether the tree contains given value",8,[[]]],[11,"len","","Return the length of the tree",8,[[]]],[11,"from","search_trees::rbtree","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","search_trees::avltree","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","search_trees::bstree","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"get_left","search_trees::rbtree","",0,[[],["option",4]]],[11,"get_right","","",0,[[],["option",4]]],[11,"get_data","","",0,[[]]],[11,"get_left","search_trees::avltree","",3,[[],["option",4]]],[11,"get_right","","",3,[[],["option",4]]],[11,"get_data","","",3,[[]]],[11,"get_left","search_trees::bstree","",5,[[],["option",4]]],[11,"get_right","","",5,[[],["option",4]]],[11,"get_data","","",5,[[]]],[11,"get_root","search_trees::rbtree","",2,[[],["option",4]]],[11,"get_root","search_trees::avltree","",4,[[],["option",4]]],[11,"get_root","search_trees::bstree","",6,[[],["option",4]]],[11,"drop","search_trees::rbtree","",2,[[]]],[11,"drop","","",0,[[]]],[11,"clone","","",1,[[],["nodecolor",4]]],[11,"eq","","",1,[[["nodecolor",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[3,"RedBlackTreeNode"],[4,"NodeColor"],[3,"RedBlackTree"],[3,"AVLTreeNode"],[3,"AVLTree"],[3,"BinarySearchTreeNode"],[3,"BinarySearchTree"],[8,"QueryableTreeNode"],[8,"QueryableTree"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);